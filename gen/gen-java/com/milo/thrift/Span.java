/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 */
package com.milo.thrift;

import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import org.apache.thrift.*;
import org.apache.thrift.meta_data.*;
import org.apache.thrift.protocol.*;

public class Span implements TBase<Span._Fields>, java.io.Serializable, Cloneable {
  private static final TStruct STRUCT_DESC = new TStruct("Span");

  private static final TField TRACE_ID_FIELD_DESC = new TField("trace_id", TType.I64, (short)1);
  private static final TField NAME_FIELD_DESC = new TField("name", TType.STRING, (short)2);
  private static final TField ID_FIELD_DESC = new TField("id", TType.I64, (short)3);
  private static final TField PARENT_ID_FIELD_DESC = new TField("parent_id", TType.I64, (short)4);
  private static final TField CLIENT_HOST_FIELD_DESC = new TField("client_host", TType.STRING, (short)5);
  private static final TField SERVER_HOST_FIELD_DESC = new TField("server_host", TType.STRING, (short)6);
  private static final TField EVENTS_FIELD_DESC = new TField("events", TType.LIST, (short)7);
  private static final TField ANNOTATIONS_FIELD_DESC = new TField("annotations", TType.MAP, (short)8);
  private static final TField COUNTERS_FIELD_DESC = new TField("counters", TType.MAP, (short)9);

  public long trace_id;
  public String name;
  public long id;
  public long parent_id;
  public String client_host;
  public String server_host;
  public List<Event> events;
  public Map<String,String> annotations;
  public Map<String,Long> counters;

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements TFieldIdEnum {
    TRACE_ID((short)1, "trace_id"),
    NAME((short)2, "name"),
    ID((short)3, "id"),
    PARENT_ID((short)4, "parent_id"),
    CLIENT_HOST((short)5, "client_host"),
    SERVER_HOST((short)6, "server_host"),
    EVENTS((short)7, "events"),
    ANNOTATIONS((short)8, "annotations"),
    COUNTERS((short)9, "counters");

    private static final Map<Integer, _Fields> byId = new HashMap<Integer, _Fields>();
    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byId.put((int)field._thriftId, field);
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      return byId.get(fieldId);
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __TRACE_ID_ISSET_ID = 0;
  private static final int __ID_ISSET_ID = 1;
  private static final int __PARENT_ID_ISSET_ID = 2;
  private BitSet __isset_bit_vector = new BitSet(3);

  public static final Map<_Fields, FieldMetaData> metaDataMap = Collections.unmodifiableMap(new EnumMap<_Fields, FieldMetaData>(_Fields.class) {{
    put(_Fields.TRACE_ID, new FieldMetaData("trace_id", TFieldRequirementType.OPTIONAL, 
        new FieldValueMetaData(TType.I64)));
    put(_Fields.NAME, new FieldMetaData("name", TFieldRequirementType.OPTIONAL, 
        new FieldValueMetaData(TType.STRING)));
    put(_Fields.ID, new FieldMetaData("id", TFieldRequirementType.OPTIONAL, 
        new FieldValueMetaData(TType.I64)));
    put(_Fields.PARENT_ID, new FieldMetaData("parent_id", TFieldRequirementType.OPTIONAL, 
        new FieldValueMetaData(TType.I64)));
    put(_Fields.CLIENT_HOST, new FieldMetaData("client_host", TFieldRequirementType.OPTIONAL, 
        new FieldValueMetaData(TType.STRING)));
    put(_Fields.SERVER_HOST, new FieldMetaData("server_host", TFieldRequirementType.OPTIONAL, 
        new FieldValueMetaData(TType.STRING)));
    put(_Fields.EVENTS, new FieldMetaData("events", TFieldRequirementType.OPTIONAL, 
        new ListMetaData(TType.LIST, 
            new StructMetaData(TType.STRUCT, Event.class))));
    put(_Fields.ANNOTATIONS, new FieldMetaData("annotations", TFieldRequirementType.OPTIONAL, 
        new MapMetaData(TType.MAP, 
            new FieldValueMetaData(TType.STRING), 
            new FieldValueMetaData(TType.STRING))));
    put(_Fields.COUNTERS, new FieldMetaData("counters", TFieldRequirementType.OPTIONAL, 
        new MapMetaData(TType.MAP, 
            new FieldValueMetaData(TType.STRING), 
            new FieldValueMetaData(TType.I64))));
  }});

  static {
    FieldMetaData.addStructMetaDataMap(Span.class, metaDataMap);
  }

  public Span() {
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public Span(Span other) {
    __isset_bit_vector.clear();
    __isset_bit_vector.or(other.__isset_bit_vector);
    this.trace_id = other.trace_id;
    if (other.isSetName()) {
      this.name = other.name;
    }
    this.id = other.id;
    this.parent_id = other.parent_id;
    if (other.isSetClient_host()) {
      this.client_host = other.client_host;
    }
    if (other.isSetServer_host()) {
      this.server_host = other.server_host;
    }
    if (other.isSetEvents()) {
      List<Event> __this__events = new ArrayList<Event>();
      for (Event other_element : other.events) {
        __this__events.add(new Event(other_element));
      }
      this.events = __this__events;
    }
    if (other.isSetAnnotations()) {
      Map<String,String> __this__annotations = new HashMap<String,String>();
      for (Map.Entry<String, String> other_element : other.annotations.entrySet()) {

        String other_element_key = other_element.getKey();
        String other_element_value = other_element.getValue();

        String __this__annotations_copy_key = other_element_key;

        String __this__annotations_copy_value = other_element_value;

        __this__annotations.put(__this__annotations_copy_key, __this__annotations_copy_value);
      }
      this.annotations = __this__annotations;
    }
    if (other.isSetCounters()) {
      Map<String,Long> __this__counters = new HashMap<String,Long>();
      for (Map.Entry<String, Long> other_element : other.counters.entrySet()) {

        String other_element_key = other_element.getKey();
        Long other_element_value = other_element.getValue();

        String __this__counters_copy_key = other_element_key;

        Long __this__counters_copy_value = other_element_value;

        __this__counters.put(__this__counters_copy_key, __this__counters_copy_value);
      }
      this.counters = __this__counters;
    }
  }

  public Span deepCopy() {
    return new Span(this);
  }

  @Deprecated
  public Span clone() {
    return new Span(this);
  }

  public long getTrace_id() {
    return this.trace_id;
  }

  public Span setTrace_id(long trace_id) {
    this.trace_id = trace_id;
    setTrace_idIsSet(true);
    return this;
  }

  public void unsetTrace_id() {
    __isset_bit_vector.clear(__TRACE_ID_ISSET_ID);
  }

  /** Returns true if field trace_id is set (has been asigned a value) and false otherwise */
  public boolean isSetTrace_id() {
    return __isset_bit_vector.get(__TRACE_ID_ISSET_ID);
  }

  public void setTrace_idIsSet(boolean value) {
    __isset_bit_vector.set(__TRACE_ID_ISSET_ID, value);
  }

  public String getName() {
    return this.name;
  }

  public Span setName(String name) {
    this.name = name;
    return this;
  }

  public void unsetName() {
    this.name = null;
  }

  /** Returns true if field name is set (has been asigned a value) and false otherwise */
  public boolean isSetName() {
    return this.name != null;
  }

  public void setNameIsSet(boolean value) {
    if (!value) {
      this.name = null;
    }
  }

  public long getId() {
    return this.id;
  }

  public Span setId(long id) {
    this.id = id;
    setIdIsSet(true);
    return this;
  }

  public void unsetId() {
    __isset_bit_vector.clear(__ID_ISSET_ID);
  }

  /** Returns true if field id is set (has been asigned a value) and false otherwise */
  public boolean isSetId() {
    return __isset_bit_vector.get(__ID_ISSET_ID);
  }

  public void setIdIsSet(boolean value) {
    __isset_bit_vector.set(__ID_ISSET_ID, value);
  }

  public long getParent_id() {
    return this.parent_id;
  }

  public Span setParent_id(long parent_id) {
    this.parent_id = parent_id;
    setParent_idIsSet(true);
    return this;
  }

  public void unsetParent_id() {
    __isset_bit_vector.clear(__PARENT_ID_ISSET_ID);
  }

  /** Returns true if field parent_id is set (has been asigned a value) and false otherwise */
  public boolean isSetParent_id() {
    return __isset_bit_vector.get(__PARENT_ID_ISSET_ID);
  }

  public void setParent_idIsSet(boolean value) {
    __isset_bit_vector.set(__PARENT_ID_ISSET_ID, value);
  }

  public String getClient_host() {
    return this.client_host;
  }

  public Span setClient_host(String client_host) {
    this.client_host = client_host;
    return this;
  }

  public void unsetClient_host() {
    this.client_host = null;
  }

  /** Returns true if field client_host is set (has been asigned a value) and false otherwise */
  public boolean isSetClient_host() {
    return this.client_host != null;
  }

  public void setClient_hostIsSet(boolean value) {
    if (!value) {
      this.client_host = null;
    }
  }

  public String getServer_host() {
    return this.server_host;
  }

  public Span setServer_host(String server_host) {
    this.server_host = server_host;
    return this;
  }

  public void unsetServer_host() {
    this.server_host = null;
  }

  /** Returns true if field server_host is set (has been asigned a value) and false otherwise */
  public boolean isSetServer_host() {
    return this.server_host != null;
  }

  public void setServer_hostIsSet(boolean value) {
    if (!value) {
      this.server_host = null;
    }
  }

  public int getEventsSize() {
    return (this.events == null) ? 0 : this.events.size();
  }

  public java.util.Iterator<Event> getEventsIterator() {
    return (this.events == null) ? null : this.events.iterator();
  }

  public void addToEvents(Event elem) {
    if (this.events == null) {
      this.events = new ArrayList<Event>();
    }
    this.events.add(elem);
  }

  public List<Event> getEvents() {
    return this.events;
  }

  public Span setEvents(List<Event> events) {
    this.events = events;
    return this;
  }

  public void unsetEvents() {
    this.events = null;
  }

  /** Returns true if field events is set (has been asigned a value) and false otherwise */
  public boolean isSetEvents() {
    return this.events != null;
  }

  public void setEventsIsSet(boolean value) {
    if (!value) {
      this.events = null;
    }
  }

  public int getAnnotationsSize() {
    return (this.annotations == null) ? 0 : this.annotations.size();
  }

  public void putToAnnotations(String key, String val) {
    if (this.annotations == null) {
      this.annotations = new HashMap<String,String>();
    }
    this.annotations.put(key, val);
  }

  public Map<String,String> getAnnotations() {
    return this.annotations;
  }

  public Span setAnnotations(Map<String,String> annotations) {
    this.annotations = annotations;
    return this;
  }

  public void unsetAnnotations() {
    this.annotations = null;
  }

  /** Returns true if field annotations is set (has been asigned a value) and false otherwise */
  public boolean isSetAnnotations() {
    return this.annotations != null;
  }

  public void setAnnotationsIsSet(boolean value) {
    if (!value) {
      this.annotations = null;
    }
  }

  public int getCountersSize() {
    return (this.counters == null) ? 0 : this.counters.size();
  }

  public void putToCounters(String key, long val) {
    if (this.counters == null) {
      this.counters = new HashMap<String,Long>();
    }
    this.counters.put(key, val);
  }

  public Map<String,Long> getCounters() {
    return this.counters;
  }

  public Span setCounters(Map<String,Long> counters) {
    this.counters = counters;
    return this;
  }

  public void unsetCounters() {
    this.counters = null;
  }

  /** Returns true if field counters is set (has been asigned a value) and false otherwise */
  public boolean isSetCounters() {
    return this.counters != null;
  }

  public void setCountersIsSet(boolean value) {
    if (!value) {
      this.counters = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case TRACE_ID:
      if (value == null) {
        unsetTrace_id();
      } else {
        setTrace_id((Long)value);
      }
      break;

    case NAME:
      if (value == null) {
        unsetName();
      } else {
        setName((String)value);
      }
      break;

    case ID:
      if (value == null) {
        unsetId();
      } else {
        setId((Long)value);
      }
      break;

    case PARENT_ID:
      if (value == null) {
        unsetParent_id();
      } else {
        setParent_id((Long)value);
      }
      break;

    case CLIENT_HOST:
      if (value == null) {
        unsetClient_host();
      } else {
        setClient_host((String)value);
      }
      break;

    case SERVER_HOST:
      if (value == null) {
        unsetServer_host();
      } else {
        setServer_host((String)value);
      }
      break;

    case EVENTS:
      if (value == null) {
        unsetEvents();
      } else {
        setEvents((List<Event>)value);
      }
      break;

    case ANNOTATIONS:
      if (value == null) {
        unsetAnnotations();
      } else {
        setAnnotations((Map<String,String>)value);
      }
      break;

    case COUNTERS:
      if (value == null) {
        unsetCounters();
      } else {
        setCounters((Map<String,Long>)value);
      }
      break;

    }
  }

  public void setFieldValue(int fieldID, Object value) {
    setFieldValue(_Fields.findByThriftIdOrThrow(fieldID), value);
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case TRACE_ID:
      return new Long(getTrace_id());

    case NAME:
      return getName();

    case ID:
      return new Long(getId());

    case PARENT_ID:
      return new Long(getParent_id());

    case CLIENT_HOST:
      return getClient_host();

    case SERVER_HOST:
      return getServer_host();

    case EVENTS:
      return getEvents();

    case ANNOTATIONS:
      return getAnnotations();

    case COUNTERS:
      return getCounters();

    }
    throw new IllegalStateException();
  }

  public Object getFieldValue(int fieldId) {
    return getFieldValue(_Fields.findByThriftIdOrThrow(fieldId));
  }

  /** Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    switch (field) {
    case TRACE_ID:
      return isSetTrace_id();
    case NAME:
      return isSetName();
    case ID:
      return isSetId();
    case PARENT_ID:
      return isSetParent_id();
    case CLIENT_HOST:
      return isSetClient_host();
    case SERVER_HOST:
      return isSetServer_host();
    case EVENTS:
      return isSetEvents();
    case ANNOTATIONS:
      return isSetAnnotations();
    case COUNTERS:
      return isSetCounters();
    }
    throw new IllegalStateException();
  }

  public boolean isSet(int fieldID) {
    return isSet(_Fields.findByThriftIdOrThrow(fieldID));
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof Span)
      return this.equals((Span)that);
    return false;
  }

  public boolean equals(Span that) {
    if (that == null)
      return false;

    boolean this_present_trace_id = true && this.isSetTrace_id();
    boolean that_present_trace_id = true && that.isSetTrace_id();
    if (this_present_trace_id || that_present_trace_id) {
      if (!(this_present_trace_id && that_present_trace_id))
        return false;
      if (this.trace_id != that.trace_id)
        return false;
    }

    boolean this_present_name = true && this.isSetName();
    boolean that_present_name = true && that.isSetName();
    if (this_present_name || that_present_name) {
      if (!(this_present_name && that_present_name))
        return false;
      if (!this.name.equals(that.name))
        return false;
    }

    boolean this_present_id = true && this.isSetId();
    boolean that_present_id = true && that.isSetId();
    if (this_present_id || that_present_id) {
      if (!(this_present_id && that_present_id))
        return false;
      if (this.id != that.id)
        return false;
    }

    boolean this_present_parent_id = true && this.isSetParent_id();
    boolean that_present_parent_id = true && that.isSetParent_id();
    if (this_present_parent_id || that_present_parent_id) {
      if (!(this_present_parent_id && that_present_parent_id))
        return false;
      if (this.parent_id != that.parent_id)
        return false;
    }

    boolean this_present_client_host = true && this.isSetClient_host();
    boolean that_present_client_host = true && that.isSetClient_host();
    if (this_present_client_host || that_present_client_host) {
      if (!(this_present_client_host && that_present_client_host))
        return false;
      if (!this.client_host.equals(that.client_host))
        return false;
    }

    boolean this_present_server_host = true && this.isSetServer_host();
    boolean that_present_server_host = true && that.isSetServer_host();
    if (this_present_server_host || that_present_server_host) {
      if (!(this_present_server_host && that_present_server_host))
        return false;
      if (!this.server_host.equals(that.server_host))
        return false;
    }

    boolean this_present_events = true && this.isSetEvents();
    boolean that_present_events = true && that.isSetEvents();
    if (this_present_events || that_present_events) {
      if (!(this_present_events && that_present_events))
        return false;
      if (!this.events.equals(that.events))
        return false;
    }

    boolean this_present_annotations = true && this.isSetAnnotations();
    boolean that_present_annotations = true && that.isSetAnnotations();
    if (this_present_annotations || that_present_annotations) {
      if (!(this_present_annotations && that_present_annotations))
        return false;
      if (!this.annotations.equals(that.annotations))
        return false;
    }

    boolean this_present_counters = true && this.isSetCounters();
    boolean that_present_counters = true && that.isSetCounters();
    if (this_present_counters || that_present_counters) {
      if (!(this_present_counters && that_present_counters))
        return false;
      if (!this.counters.equals(that.counters))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  public void read(TProtocol iprot) throws TException {
    TField field;
    iprot.readStructBegin();
    while (true)
    {
      field = iprot.readFieldBegin();
      if (field.type == TType.STOP) { 
        break;
      }
      _Fields fieldId = _Fields.findByThriftId(field.id);
      if (fieldId == null) {
        TProtocolUtil.skip(iprot, field.type);
      } else {
        switch (fieldId) {
          case TRACE_ID:
            if (field.type == TType.I64) {
              this.trace_id = iprot.readI64();
              setTrace_idIsSet(true);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case NAME:
            if (field.type == TType.STRING) {
              this.name = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case ID:
            if (field.type == TType.I64) {
              this.id = iprot.readI64();
              setIdIsSet(true);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case PARENT_ID:
            if (field.type == TType.I64) {
              this.parent_id = iprot.readI64();
              setParent_idIsSet(true);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case CLIENT_HOST:
            if (field.type == TType.STRING) {
              this.client_host = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case SERVER_HOST:
            if (field.type == TType.STRING) {
              this.server_host = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case EVENTS:
            if (field.type == TType.LIST) {
              {
                TList _list0 = iprot.readListBegin();
                this.events = new ArrayList<Event>(_list0.size);
                for (int _i1 = 0; _i1 < _list0.size; ++_i1)
                {
                  Event _elem2;
                  _elem2 = new Event();
                  _elem2.read(iprot);
                  this.events.add(_elem2);
                }
                iprot.readListEnd();
              }
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case ANNOTATIONS:
            if (field.type == TType.MAP) {
              {
                TMap _map3 = iprot.readMapBegin();
                this.annotations = new HashMap<String,String>(2*_map3.size);
                for (int _i4 = 0; _i4 < _map3.size; ++_i4)
                {
                  String _key5;
                  String _val6;
                  _key5 = iprot.readString();
                  _val6 = iprot.readString();
                  this.annotations.put(_key5, _val6);
                }
                iprot.readMapEnd();
              }
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case COUNTERS:
            if (field.type == TType.MAP) {
              {
                TMap _map7 = iprot.readMapBegin();
                this.counters = new HashMap<String,Long>(2*_map7.size);
                for (int _i8 = 0; _i8 < _map7.size; ++_i8)
                {
                  String _key9;
                  long _val10;
                  _key9 = iprot.readString();
                  _val10 = iprot.readI64();
                  this.counters.put(_key9, _val10);
                }
                iprot.readMapEnd();
              }
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
        }
        iprot.readFieldEnd();
      }
    }
    iprot.readStructEnd();

    // check for required fields of primitive type, which can't be checked in the validate method
    validate();
  }

  public void write(TProtocol oprot) throws TException {
    validate();

    oprot.writeStructBegin(STRUCT_DESC);
    if (isSetTrace_id()) {
      oprot.writeFieldBegin(TRACE_ID_FIELD_DESC);
      oprot.writeI64(this.trace_id);
      oprot.writeFieldEnd();
    }
    if (this.name != null) {
      if (isSetName()) {
        oprot.writeFieldBegin(NAME_FIELD_DESC);
        oprot.writeString(this.name);
        oprot.writeFieldEnd();
      }
    }
    if (isSetId()) {
      oprot.writeFieldBegin(ID_FIELD_DESC);
      oprot.writeI64(this.id);
      oprot.writeFieldEnd();
    }
    if (isSetParent_id()) {
      oprot.writeFieldBegin(PARENT_ID_FIELD_DESC);
      oprot.writeI64(this.parent_id);
      oprot.writeFieldEnd();
    }
    if (this.client_host != null) {
      if (isSetClient_host()) {
        oprot.writeFieldBegin(CLIENT_HOST_FIELD_DESC);
        oprot.writeString(this.client_host);
        oprot.writeFieldEnd();
      }
    }
    if (this.server_host != null) {
      if (isSetServer_host()) {
        oprot.writeFieldBegin(SERVER_HOST_FIELD_DESC);
        oprot.writeString(this.server_host);
        oprot.writeFieldEnd();
      }
    }
    if (this.events != null) {
      if (isSetEvents()) {
        oprot.writeFieldBegin(EVENTS_FIELD_DESC);
        {
          oprot.writeListBegin(new TList(TType.STRUCT, this.events.size()));
          for (Event _iter11 : this.events)
          {
            _iter11.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
    }
    if (this.annotations != null) {
      if (isSetAnnotations()) {
        oprot.writeFieldBegin(ANNOTATIONS_FIELD_DESC);
        {
          oprot.writeMapBegin(new TMap(TType.STRING, TType.STRING, this.annotations.size()));
          for (Map.Entry<String, String> _iter12 : this.annotations.entrySet())
          {
            oprot.writeString(_iter12.getKey());
            oprot.writeString(_iter12.getValue());
          }
          oprot.writeMapEnd();
        }
        oprot.writeFieldEnd();
      }
    }
    if (this.counters != null) {
      if (isSetCounters()) {
        oprot.writeFieldBegin(COUNTERS_FIELD_DESC);
        {
          oprot.writeMapBegin(new TMap(TType.STRING, TType.I64, this.counters.size()));
          for (Map.Entry<String, Long> _iter13 : this.counters.entrySet())
          {
            oprot.writeString(_iter13.getKey());
            oprot.writeI64(_iter13.getValue());
          }
          oprot.writeMapEnd();
        }
        oprot.writeFieldEnd();
      }
    }
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("Span(");
    boolean first = true;

    if (isSetTrace_id()) {
      sb.append("trace_id:");
      sb.append(this.trace_id);
      first = false;
    }
    if (isSetName()) {
      if (!first) sb.append(", ");
      sb.append("name:");
      if (this.name == null) {
        sb.append("null");
      } else {
        sb.append(this.name);
      }
      first = false;
    }
    if (isSetId()) {
      if (!first) sb.append(", ");
      sb.append("id:");
      sb.append(this.id);
      first = false;
    }
    if (isSetParent_id()) {
      if (!first) sb.append(", ");
      sb.append("parent_id:");
      sb.append(this.parent_id);
      first = false;
    }
    if (isSetClient_host()) {
      if (!first) sb.append(", ");
      sb.append("client_host:");
      if (this.client_host == null) {
        sb.append("null");
      } else {
        sb.append(this.client_host);
      }
      first = false;
    }
    if (isSetServer_host()) {
      if (!first) sb.append(", ");
      sb.append("server_host:");
      if (this.server_host == null) {
        sb.append("null");
      } else {
        sb.append(this.server_host);
      }
      first = false;
    }
    if (isSetEvents()) {
      if (!first) sb.append(", ");
      sb.append("events:");
      if (this.events == null) {
        sb.append("null");
      } else {
        sb.append(this.events);
      }
      first = false;
    }
    if (isSetAnnotations()) {
      if (!first) sb.append(", ");
      sb.append("annotations:");
      if (this.annotations == null) {
        sb.append("null");
      } else {
        sb.append(this.annotations);
      }
      first = false;
    }
    if (isSetCounters()) {
      if (!first) sb.append(", ");
      sb.append("counters:");
      if (this.counters == null) {
        sb.append("null");
      } else {
        sb.append(this.counters);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws TException {
    // check for required fields
  }

}

